PROGRAM MainProgram
VAR
	Tank1FillingValveController : classFlipFlopCtrl; (*ValveControllers*)
	Tank2FillingValveController : classFlipFlopCtrl; (**)
	Tank3FillingValveController : classFlipFlopCtrl; (**)
	Tank4FillingValveController : classFlipFlopCtrl; (**)
	Tank1DrainValveController : classFlipFlopCtrl; (**)
	Tank2DrainValveController : classFlipFlopCtrl; (**)
	Tank3DrainValveController : classFlipFlopCtrl; (**)
	Tank4DrainValveController : classFlipFlopCtrl; (**)
	CollectionTankFillingValveController : classFlipFlopCtrl; (**)
	CollectionTankDrainValveController : classFlipFlopCtrl; (**)
	Tank1Control : TankControl; (* Tank controllers*)
	Tank2Control : TankControl; (**)
	Tank3Control : TankControl; (**)
	Tank4Control : TankControl; (**)
	CollectionTankControl : TankControl; (**)
	Pump1Controller : classFlipFlopCtrl; (* Pump controllers*)
	Pump2Controller : classFlipFlopCtrl; (**)
	vRecirculationSP : REAL; (* Support variables*)
	vNoOfFilling : REAL; (**)
	vLevelRef : REAL; (**)
	vFillingRef : REAL; (**)
	vMaxTankLevel : REAL := 85; (**)
	CollectingTankFillingValveOpene : INT; (**)
	cTank1Capacity : REAL := 125; (**)
	cTank2Capacity : REAL := 125; (**)
	cTank3Capacity : REAL := 125; (**)
	cTank4Capacity : REAL := 125; (**)
	cMaxTankLevel : REAL := 80; (**)
	cMinStorageTankLevel : REAL := 20; (**)
END_VAR
STCODE
Pump1Controller(
	CloseAutoCmd := NOT IO.Pump1Running,
	OpenAutoCmd := NOT IO.CollectingTankDrainValveOpened OR IO.CollectingTankLevel_pc < 10,
	Opened := NOT IO.Pump1Running,
	Closed := IO.Pump1Running,
	qCloseCmd => IO.Pump1StartCmd,
	qOpenCmd => IO.Pump1StopCmd);

Pump2Controller(
	CloseAutoCmd := NOT IO.Pump2Running,
	OpenAutoCmd := NOT IO.CollectingTankDrainValveOpened OR IO.CollectingTankLevel_pc < 10,
	Opened := NOT IO.Pump2Running,
	Closed := IO.Pump2Running,
	qCloseCmd => IO.Pump2StartCmd,
	qOpenCmd => IO.Pump2StopCmd);
	
vLevelRef := ((0.01 * IO.Tank1Level_pc * cTank1Capacity 
		   + 0.01 * IO.Tank2Level_pc * cTank2Capacity 
		   + 0.01 * IO.Tank3Level_pc * cTank3Capacity 
		   + 0.01 * IO.Tank4Level_pc * cTank4Capacity)
		/(cTank1Capacity + cTank2Capacity + cTank3Capacity + cTank4Capacity));

vFillingRef := vMaxTankLevel - vLevelRef*100;

vNoOfFilling := BOOL_TO_REAL(IO.Tank1FillingValveOpened)
			+	BOOL_TO_REAL(IO.Tank2FillingValveOpened)
			+ 	BOOL_TO_REAL(IO.Tank3FillingValveOpened)
			+ 	BOOL_TO_REAL(IO.Tank4FillingValveOpened);	   
		   
Tank1Control(
	Tanklevel_pc := IO.Tank1Level_pc,
	LevelRef := vLevelRef * 100 + vFillingRef);
	
Tank2Control(
	Tanklevel_pc := IO.Tank2Level_pc,
	LevelRef := vLevelRef * 100 + vFillingRef);	

Tank3Control(
	Tanklevel_pc := IO.Tank3Level_pc,
	LevelRef := vLevelRef * 100 + vFillingRef);
	
Tank4Control(
	Tanklevel_pc := IO.Tank4Level_pc,
	LevelRef := vLevelRef * 100 + vFillingRef);
	
CollectionTankControl(
	Tanklevel_pc := IO.CollectingTankLevel_pc,
	LevelRef := IO.CollectingTankLevel_pc);
	
(* Commands to valves *)
Tank1FillingValveController(
	CloseAutoCmd := NOT Tank1Control.Fill,
	OpenAutoCmd := Tank1Control.Fill,
	Opened := IO.Tank1FillingValveOpened,
	Closed := IO.Tank1FillingValveClosed,
	qCloseCmd => IO.Tank1FillingValveCloseCmd,
	qOpenCmd => IO.Tank1FillingValveOpenCmd);
	
Tank2FillingValveController(
	CloseAutoCmd := NOT Tank2Control.Fill,
	OpenAutoCmd := Tank2Control.Fill,
	Opened := IO.Tank2FillingValveOpened,
	Closed := IO.Tank2FillingValveClosed,
	qCloseCmd => IO.Tank2FillingValveCloseCmd,
	qOpenCmd => IO.Tank2FillingValveOpenCmd);

Tank3FillingValveController(
	CloseAutoCmd := NOT Tank3Control.Fill,
	OpenAutoCmd := Tank3Control.Fill,
	Opened := IO.Tank3FillingValveOpened,
	Closed := IO.Tank3FillingValveClosed,
	qCloseCmd => IO.Tank3FillingValveCloseCmd,
	qOpenCmd => IO.Tank3FillingValveOpenCmd);
	
Tank4FillingValveController(
	CloseAutoCmd := NOT Tank4Control.Fill,
	OpenAutoCmd := Tank4Control.Fill,
	Opened := IO.Tank4FillingValveOpened,
	Closed := IO.Tank4FillingValveClosed,
	qCloseCmd => IO.Tank4FillingValveCloseCmd,
	qOpenCmd => IO.Tank4FillingValveOpenCmd);

Tank1DrainValveController(
	CloseAutoCmd := NOT Tank1Control.Drain,
	OpenAutoCmd := Tank1Control.Drain,
	Opened := IO.Tank1DrainValveOpened,
	Closed := IO.Tank1DrainValveClosed,
	qCloseCmd => IO.Tank1DrainValveCloseCmd,
	qOpenCmd => IO.Tank1DrainValveOpenCmd);
	
Tank2DrainValveController(
	CloseAutoCmd := NOT Tank2Control.Drain,
	OpenAutoCmd := Tank2Control.Drain,
	Opened := IO.Tank2DrainValveOpened,
	Closed := IO.Tank2DrainValveClosed,
	qCloseCmd => IO.Tank2DrainValveCloseCmd,
	qOpenCmd => IO.Tank2DrainValveOpenCmd);

Tank3DrainValveController(
	CloseAutoCmd := NOT Tank3Control.Drain,
	OpenAutoCmd := Tank3Control.Drain,
	Opened := IO.Tank3DrainValveOpened,
	Closed := IO.Tank3DrainValveClosed,
	qCloseCmd => IO.Tank3DrainValveCloseCmd,
	qOpenCmd => IO.Tank3DrainValveOpenCmd);
	
Tank4DrainValveController(
	CloseAutoCmd := NOT Tank4Control.Drain,
	OpenAutoCmd := Tank4Control.Drain,
	Opened := IO.Tank4DrainValveOpened,
	Closed := IO.Tank4DrainValveClosed,
	qCloseCmd => IO.Tank4DrainValveCloseCmd,
	qOpenCmd => IO.Tank4DrainValveOpenCmd);
	
CollectionTankDrainValveController(
	CloseAutoCmd := NOT CollectionTankControl.Fill,
	OpenAutoCmd := CollectionTankControl.Fill,
	Opened := IO.CollectingTankDrainValveOpened,
	Closed := IO.CollectingTankDrainValveClosed,
	qCloseCmd => IO.CollectingTankDrainValveCloseCmd,
	qOpenCmd => IO.CollectingTankDrainValveOpenCmd);
	
CollectionTankFillingValveController(
	CloseAutoCmd := NOT CollectionTankControl.Drain,
	OpenAutoCmd := CollectionTankControl.Drain,
	Opened := IO.CollectingTankFillingValveOpened,
	Closed := IO.CollectingTankFillingValveClosed,
	qCloseCmd => IO.CollectingTankFillingValveCloseCmd,
	qOpenCmd => IO.CollectingTankFillingValveOpenCmd);

	
vRecirculationSP := 100 - (25 * vNoOfFilling);

(* Set up the recirculation valve *)
IF IO.RecirculationValvePosition < vRecirculationSP THEN
	IO.OpenRecirculationValveCMD := TRUE;
	IO.CloseRecirculationValveCMD := FALSE;
ELSIF IO.RecirculationValvePosition > vRecirculationSP THEN
	IO.OpenRecirculationValveCMD := FALSE;
	IO.CloseRecirculationValveCMD := TRUE;
ELSE
	IO.OpenRecirculationValveCMD := FALSE;
	IO.CloseRecirculationValveCMD := FALSE;
END_IF
END_STCODE